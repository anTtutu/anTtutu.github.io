I"z<h2 id="测试web系统的sql注入问题学着使用神器sqlmap下载了最新版本">测试web系统的sql注入问题，学着使用神器sqlmap，下载了最新版本:</h2>
<p>Git地址：https://github.com/sqlmapproject/sqlmap</p>

<p>前提条件设置好python2.7和环境变量，python3.6也支持只是2.7当前工具更多</p>

<h2 id="以某自己搭建的注入点为例记录下加搜集的参数含义">以某自己搭建的注入点为例：记录下加搜集的参数含义</h2>

<h3 id="参数-u或者url">参数：-u或者–url</h3>

<p>格式：http(s)://targeturl[:port]/[…]</p>

<p>例如：Python sqlmap.py -u “http://www.target.com/vuln.PHP?id=1” -f –banner –dbs –users</p>

<h3 id="参数level">参数：–level</h3>

<p>共有五个等级，默认为1，sqlmap使用的payload可以在xml/payloads.xml中看到，你也可以根据相应的格式添加自己的payload。</p>

<p>这个参数不仅影响使用哪些payload同时也会影响测试的注入点，GET和POST的数据都会测试，HTTP Cookie在level为2的时候就会测试，HTTP User-Agent/Referer头在level为3的时候就会测试。</p>

<p>总之在你不确定哪个payload或者参数为注入点的时候，为了保证全面性，建议使用高的level值。</p>

<h3 id="参数risk">参数：–risk</h3>

<p>共有四个风险等级，默认是1会测试大部分的测试语句，2会增加基于事件的测试语句，3会增加OR语句的SQL注入测试。</p>

<p>在有些时候，例如在UPDATE的语句中，注入一个OR的测试语句，可能导致更新的整个表，可能造成很大的风险。</p>

<p>测试的语句同样可以在xml/payloads.xml中找到，你也可以自行添加payload。</p>

<h3 id="参数tamper">参数：–tamper</h3>

<p>sqlmap除了使用CHAR()函数来防止出现单引号之外没有对注入的数据修改，你可以使用–tamper参数对数据做修改来绕过WAF等设备。</p>

<h3 id="参数dbms">参数：–dbms</h3>

<p>默认情况系sqlmap会自动的探测web应用后端的数据库是什么，sqlmap支持的数据库有：</p>

<p>MySQL、Oracle、PostgreSQL、Microsoft SQL Server、Microsoft Access、SQLite、Firebird、Sybase、SAP MaxDB、DB2</p>

<h3 id="参数os">参数：–os</h3>

<p>默认情况下sqlmap会自动的探测数据库服务器系统，支持的系统有：Linux、Windows。</p>

<h3 id="参数-current-user">参数：-current-user</h3>

<p>在大多数据库中可以获取到管理数据的用户。</p>

<h3 id="参数current-db">参数：–current-db</h3>

<p>返还当前连接的数据库。</p>

<h3 id="参数is-dba">参数：–is-dba</h3>

<p>判断当前的用户是否为管理，是的话会返回True。</p>

<h3 id="参数users">参数：–users</h3>

<p>当前用户有权限读取包含所有用户的表的权限时，就可以列出所有管理用户。</p>

<h3 id="参数tablesexclude-sysdbs-d">参数：–tables,–exclude-sysdbs,-D</h3>

<p>当前用户有权限读取包含所有数据库表信息的表中的时候，即可列出一个特定数据的所有表。</p>

<p>如果你不提供-D参数来列指定的一个数据的时候，sqlmap会列出数据库所有库的所有表。</p>

<p>–exclude-sysdbs参数是指包含了所有的系统数据库。</p>

<p>需要注意的是在Oracle中你需要提供的是TABLESPACE_NAME而不是数据库名称</p>

<h3 id="参数columns-c-t-d">参数：–columns,-C,-T,-D</h3>

<p>当前用户有权限读取包含所有数据库表信息的表中的时候，即可列出指定数据库表中的字段，同时也会列出字段的数据类型。</p>

<p>如果没有使用-D参数指定数据库时，默认会使用当前数据库。</p>

<h3 id="参数dump-c-t-dstartstopfirstlast">参数：–dump,-C,-T,-D,–start,–stop,–first,–last</h3>

<p>如果当前管理员有权限读取数据库其中的一个表的话，那么就能获取真个表的所有内容。</p>

<p>使用-D,-T参数指定想要获取哪个库的哪个表，不适用-D参数时，默认使用当前库。</p>

<h3 id="参数sql-querysql-shell">参数：–sql-query,–sql-shell</h3>

<p>sqlmap会自动检测确定使用哪种SQL注入技术，如何插入检索语句。</p>

<p>如果是SELECT查询语句，sqlap将会输出结果。如果是通过SQL注入执行其他语句，需要测试是否支持多语句执行SQL语句。</p>

<h3 id="参数cookieload-cookiesdrop-set-cookie">参数：–cookie,–load-cookies,–drop-set-cookie</h3>

<p>这个参数在以下两个方面很有用：</p>

<p>1、web应用需要登陆的时候。</p>

<p>2、你想要在这些头参数中测试SQL注入时。</p>

<p>可以通过抓包把cookie获取到，复制出来，然后加到–cookie参数里。</p>

<p>在HTTP请求中，遇到Set-Cookie的话，sqlmap会自动获取并且在以后的请求中加入，并且会尝试SQL注入。</p>

<p>如果你不想接受Set-Cookie可以使用–drop-set-cookie参数来拒接。</p>

<p>当你使用–cookie参数时，当返回一个Set-Cookie头的时候，sqlmap会询问你用哪个cookie来继续接下来的请求。当–level的参数设定为2或者2以上的时候，sqlmap会尝试注入Cookie参数。</p>

<h3 id="参数user-agentrandom-agent">参数：–user-agent,–random-agent</h3>

<p>默认情况下sqlmap的HTTP请求头中User-Agent值是：</p>

<p>sqlmap/1.0-dev-xxxxxxx (http://sqlmap.org)
可以使用–user-anget参数来修改，同时也可以使用–random-agnet参数来随机的从./txt/user-agents.txt中获取。</p>

<p>当–level参数设定为3或者3以上的时候，会尝试对User-Angent进行注入</p>

<h3 id="参数os-cmdos-shell">参数：–os-cmd,–os-shell</h3>

<p>当数据库为MySQL，PostgreSQL或Microsoft SQL Server，并且当前用户有权限使用特定的函数。</p>

<p>在mysql、PostgreSQL，sqlmap上传一个二进制库，包含用户自定义的函数，sys_exec()和sys_eval()。</p>

<p>那么他创建的这两个函数可以执行系统命令。在Microsoft SQL Server，sqlmap将会使用xp_cmdshell存储过程，如果被禁（在Microsoft SQL Server 2005及以上版本默认禁制），sqlmap会重新启用它，如果不存在，会自动创建</p>
:ET