<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on Anttu&#39;s Blog</title>
    <link>https://anTtutu.github.io/categories/java/</link>
    <description>Recent content in java on Anttu&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 19 Nov 2021 00:29:47 +0800</lastBuildDate><atom:link href="https://anTtutu.github.io/categories/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>lombok一些注解的含义</title>
      <link>https://anTtutu.github.io/post/2021-11-19-lombok/</link>
      <pubDate>Fri, 19 Nov 2021 00:29:47 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2021-11-19-lombok/</guid>
      <description>前言 lombok一些注解的含义整理 1、@Accessors(chain = true) 链式风格，在调用set方法时，返回这个类的实例对象，比如：a.b.c 2、@Data 在JavaBean或类JavaBean中使用，这个注解包含范围最广，它包含getter、setter、NoArgsConst</description>
    </item>
    
    <item>
      <title>java编码安全</title>
      <link>https://anTtutu.github.io/post/2021-09-30-safe_coding_java/</link>
      <pubDate>Thu, 30 Sep 2021 00:29:47 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2021-09-30-safe_coding_java/</guid>
      <description>后端java开发 &amp;ndash; 转自腾讯github 1.1 数据持久化 1.1.1【必须】SQL语句默认使用预编译并绑定变量 Web后台系统应默认使用预编译绑定变量的形式创建sql语句，保持查询语句和数据相分离。以从本质上避免SQL注入风险。 如使用Mybatis作为持久层框架，应通过#{}语法进行参数绑</description>
    </item>
    
    <item>
      <title>java OOM的种类整理</title>
      <link>https://anTtutu.github.io/post/2018-05-08-OOM/</link>
      <pubDate>Tue, 08 May 2018 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2018-05-08-OOM/</guid>
      <description>前言 java OOM的种类整理 1、分类 1.1【情况一】： 1 java.lang.OutOfMemoryError: Java heap space: 这种是java堆内存不够，一个原因是真不够，另一个原因是程序中有死循环 如果是java堆内存不够的话，可以通过调整JVM下面的配置来解决： -Xms3062m -Xmx3062m 1.2【情况二】 1 java.lang.OutOfMemoryError: GC overhead limit exceeded 【解释】 JDK6新增错误类型，当GC为释放很小空间占用</description>
    </item>
    
    <item>
      <title>springmvc的参数校验注解整理</title>
      <link>https://anTtutu.github.io/post/2018-03-19-springmvc/</link>
      <pubDate>Mon, 19 Mar 2018 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2018-03-19-springmvc/</guid>
      <description>1、JSR303注解字段校验 注解 说明 功能 @AssertFalse Boolean,boolean 验证注解的元素值是false @AssertTrue Boolean,boolean 验证注解的元素值是true @NotNull 任意类型 验证注解的元素值不是null @Null 任意类型 验证注解的元素值是null @Min(value=值) BigDecimal，BigInteger, byte,short, int, long，等任何Number或</description>
    </item>
    
    <item>
      <title>java小日常记录-不定期更新</title>
      <link>https://anTtutu.github.io/post/2017-08-27-java_use_note/</link>
      <pubDate>Sun, 27 Aug 2017 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2017-08-27-java_use_note/</guid>
      <description>1、web项目远程调测 - 仅用于测试环境或者上线前的调测 注意：仅限测试环境或者上线前的调测，如果用于生产环境，你的开发工具再debug模式起着的话，会拦截所有的请求。 1 2 # linux增加以下这段就可以远程连接服务器的5888端口了 CATALINA_OPTS=&amp;#34;-server -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5888&amp;#34; 添加了debug端口以后好像会出现./sh</description>
    </item>
    
    <item>
      <title>web应用分析利器-xrebel</title>
      <link>https://anTtutu.github.io/post/2017-08-23-xrebel/</link>
      <pubDate>Wed, 23 Aug 2017 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2017-08-23-xrebel/</guid>
      <description>XRebel 是不间断运行在 web 应用的交互式分析器，当发现问题会在浏览器中显示警告信息。XRebel 会实时监测应用代码的性能指标和可能会发生的问题。 看名称跟之前的jrebel有点相像，对了，是同一家公司的产品，jrebel解决java项目动态部署，xrebel解决j2ee应用的交互式分析（甚至</description>
    </item>
    
    <item>
      <title>eclipse之jrebel热部署插件</title>
      <link>https://anTtutu.github.io/post/2017-06-04-jrebel/</link>
      <pubDate>Sun, 04 Jun 2017 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2017-06-04-jrebel/</guid>
      <description>JRebel是一个J2EE热部署的工具。使用它可以减少浪费8-18％的开发时间在项目的构建和部署上。虽然Java也提供了HotSpot的JVM，但是如果你修改的类中有方法名称变动的话，HotSpot就无能为力了，必须要重要启动应用服务器。JRebel则可以动态监视class文件及</description>
    </item>
    
    <item>
      <title>利用网上的Caeser算法写了一个唯一id生成工具</title>
      <link>https://anTtutu.github.io/post/2017-05-10-caeser/</link>
      <pubDate>Wed, 10 May 2017 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2017-05-10-caeser/</guid>
      <description>工作中需要用到，不需要用uuid这种太长的，但是需要有自己特色标识的，于是晚上搜集了部分算法和思路，加工出来一个唯一随机id生成类 思路：改造过的Caesar算法，利用随机数加密，生成前12位 + 后4位随机数，经测试大量数据和实际使用验证，无重复值出现，可以放心使用 // key private static String KEYS = &amp;quot;0123456789qwertyuiopasdfghjklzxcvbnm&amp;quot;; /**</description>
    </item>
    
    <item>
      <title>Java高防OCR和机器人图形验证码</title>
      <link>https://anTtutu.github.io/post/2017-05-09-Java_ImgCode/</link>
      <pubDate>Tue, 09 May 2017 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2017-05-09-Java_ImgCode/</guid>
      <description>结合网上的图形验证码技术，不依赖第三方包纯java加工了一个比较复杂的图形验证码方案，防OCR、防机器人。 网上的图形验证码方案都是零星的，弄了一个随机字体、随机彩色字符、随机字体大小、随机扭曲、随机旋转等技术，能有效的防OCR、描边、深浅色等技术识别。 本意是想区分登录、领券、抽奖</description>
    </item>
    
  </channel>
</rss>
