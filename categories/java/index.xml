<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on Anttu&#39;s Blog</title>
    <link>https://anTtutu.github.io/categories/java/</link>
    <description>Recent content in java on Anttu&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 02 Apr 2022 00:29:47 +0800</lastBuildDate><atom:link href="https://anTtutu.github.io/categories/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SpringCloud GateWay的一些细节注意</title>
      <link>https://anTtutu.github.io/post/2022-04-02-spring_cloud_gateway/</link>
      <pubDate>Sat, 02 Apr 2022 00:29:47 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2022-04-02-spring_cloud_gateway/</guid>
      <description>前言 spring cloud 2.* 的路由用的是 gateway 方案，不再是 1.* 时代的 zuul 了，不过也带来了新问题，这里整理下近期优化 gateway 的鉴权带来的爬坑记录 1、理解 gateway 与 zuul 比较 SpringCloud Gateway 是 Spring Cloud 的一个全新项目，该项目是基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。 SpringCloud Gateway 作</description>
    </item>
    
    <item>
      <title>spring boot cli&amp;spring cloud cli简单介绍</title>
      <link>https://anTtutu.github.io/post/2022-02-07-spring_cli/</link>
      <pubDate>Mon, 07 Feb 2022 00:29:47 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2022-02-07-spring_cli/</guid>
      <description>前言 尝试了下springboot cli和spring cloud cli 命令，整理了下参数和创建项目的介绍 1、下载 1.1 下载springboot cli安装包 官方介绍：https://docs.spring.io/spring-boot/docs/current/reference/html/gett</description>
    </item>
    
    <item>
      <title>一些正则小细节-不定期补充</title>
      <link>https://anTtutu.github.io/post/2022-01-07-regexp/</link>
      <pubDate>Fri, 07 Jan 2022 00:29:47 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2022-01-07-regexp/</guid>
      <description>前言 记录日常工作碰到的一些正则小细节 1、group分组 需要通过()把提取的参数圈起来，这样才会产生分组 1 2 3 4 5 6 7 8 9 10 private static String collectMapperId(String value) { String result = &amp;#34;&amp;#34;; String regId = &amp;#34;id=\&amp;#34;(.*?)\&amp;#34;&amp;#34;; Pattern pattern = Pattern.compile(regId); Matcher matcher = pattern.matcher(value); if (matcher.find()) { result = matcher.group(1); } return result; } 对比如果没有(),是没有分组效果的 1 2 Exception in thread &amp;#34;main&amp;#34; java.lang.IndexOutOfBoundsException: No group 1 at java.util.regex.Matcher.group(Matcher.java:538) 阅读源码和源码中的注释，其实也是s.</description>
    </item>
    
    <item>
      <title>sdkman的使用</title>
      <link>https://anTtutu.github.io/post/2022-01-06-sdkman/</link>
      <pubDate>Thu, 06 Jan 2022 00:29:47 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2022-01-06-sdkman/</guid>
      <description>前言 多sdk版本管理工具 1、安装java jdk 1 sdk install java 2、安装指定版本的 java jdk 1 sdk install java 8u131 3、安装本地包 1 sdk install groovy 3.0.0-SNAPSHOT /path/to/groovy-3.0.0-SNAPSHOT 4、移除 java jdk 1 sdk uninstall java 5、查看当前生效的 java jdk 1 2 3 sdk current java # 查看所有本地包的当前版本 sdk current 6、查看支持的清单 1 sdk list 7、查看软件的版本 1 sdk list java 8、临时切换版本 1 sdk use java 8.0.232.hs-adpt 9、切换默认</description>
    </item>
    
    <item>
      <title>log4j2远程执行漏洞</title>
      <link>https://anTtutu.github.io/post/2021-12-13-log4j2_cve/</link>
      <pubDate>Mon, 13 Dec 2021 00:29:47 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2021-12-13-log4j2_cve/</guid>
      <description>前言 12月9日爆出来的log4j2远程执行漏洞，因为影响巨大，网上新闻和介绍特别多，这里不多说，间接使用log4j2的第三方也不少，等官网修复不知道是否赶得上，直接采用暴力删除jndilook.class最简单 1、直接删除漏洞class 1 2 3 4 5 6 7 8 9 10 11 #!/bin/bash set -eu for JAR_PATH in &amp;#34;$@&amp;#34;; do if [[ $JAR_PATH</description>
    </item>
    
    <item>
      <title>lombok一些注解的含义</title>
      <link>https://anTtutu.github.io/post/2021-11-19-lombok/</link>
      <pubDate>Fri, 19 Nov 2021 00:29:47 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2021-11-19-lombok/</guid>
      <description>前言 lombok一些注解的含义整理 1、@Accessors(chain = true) 链式风格，在调用set方法时，返回这个类的实例对象，比如：a.b.c 2、@Data 在JavaBean或类JavaBean中使用，这个注解包含范围最广，它包含getter、setter、NoArgsConst</description>
    </item>
    
    <item>
      <title>caffeine和springcache</title>
      <link>https://anTtutu.github.io/post/2021-10-11-caffeine_springcache/</link>
      <pubDate>Mon, 11 Oct 2021 00:29:47 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2021-10-11-caffeine_springcache/</guid>
      <description>前言 说到caffeine，一般会对比 google 家的 guava，这里只做浅析。 缓存 缓存分为本地缓存和远端缓存。 常见的远端缓存有Redis，MongoDB； 本地缓存一般使用map的方式保存在本地内存中。 一般我们在业务中操作缓存，都会操作缓存和数据源两部分。 如：put数据时，先插入DB，再删除</description>
    </item>
    
    <item>
      <title>java编码安全</title>
      <link>https://anTtutu.github.io/post/2021-09-30-safe_coding_java/</link>
      <pubDate>Thu, 30 Sep 2021 00:29:47 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2021-09-30-safe_coding_java/</guid>
      <description>后端java开发 &amp;ndash; 转自腾讯github 1.1 数据持久化 1.1.1【必须】SQL语句默认使用预编译并绑定变量 Web后台系统应默认使用预编译绑定变量的形式创建sql语句，保持查询语句和数据相分离。以从本质上避免SQL注入风险。 如使用Mybatis作为持久层框架，应通过#{}语法进行参数绑</description>
    </item>
    
    <item>
      <title>maven校验依赖包CVE漏洞</title>
      <link>https://anTtutu.github.io/post/2021-09-19-maven_verify/</link>
      <pubDate>Sun, 19 Sep 2021 00:29:47 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2021-09-19-maven_verify/</guid>
      <description>前言 maven也可以校验依赖包是有有CVE漏洞 1、maven检测依赖包CVE漏洞 1 mvn verify -DskipTests=true 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 &amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;!-- owasp check CVE 检查依赖包是否有漏洞 command: mvn verify --&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.owasp&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;dependency-check-maven&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;6.5.1&amp;lt;/version&amp;gt; &amp;lt;executions&amp;gt; &amp;lt;execution&amp;gt; &amp;lt;goals&amp;gt; &amp;lt;goal&amp;gt;check&amp;lt;/goal&amp;gt; &amp;lt;/goals&amp;gt; &amp;lt;/execution&amp;gt; &amp;lt;/executions&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/build&amp;gt; 2、检测结果demo 第一次执行因下载CVE数据有些慢 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19</description>
    </item>
    
    <item>
      <title>jvm的大dump文件分析</title>
      <link>https://anTtutu.github.io/post/2021-08-10-jvm_dump_analyse/</link>
      <pubDate>Tue, 10 Aug 2021 00:29:47 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2021-08-10-jvm_dump_analyse/</guid>
      <description>前言 参考dump文件的大小，如果超过6G、8G 一般我们本地电脑无法打开，可以找大容量的linux服务器，配置对应启动的jvm 内存后可以参考下面的步骤 1、下载linux版本的mat 1 wget http://eclipse.stu.edu.tw/mat/1.9.0/rcp/MemoryAnalyzer-1.9.0.20190605-linux.gtk.x86_64.zip 2、解压zip包 unzip MemoryAnalyzer-1.9.0.20190605-linux.gtk.x86_64.zip 3、修改linux mat的堆内存大小（看自己下载的堆的大小，默认mat的堆支</description>
    </item>
    
    <item>
      <title>maven的scope参数</title>
      <link>https://anTtutu.github.io/post/2021-07-15-maven_scope/</link>
      <pubDate>Thu, 15 Jul 2021 00:29:47 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2021-07-15-maven_scope/</guid>
      <description>1、用maven引用没进中央仓库的包 在使用maven的时候，如果我们要依赖一个本地的jar包的时候，通常都会使用&amp;lt;scope&amp;gt;system&amp;lt;/scope&amp;gt;和&amp;lt;systemPath&amp;gt;&amp;lt;/systemPath&amp;gt;来处理。 例如： 1 2 3 4 5 6</description>
    </item>
    
    <item>
      <title>kafka集群和zk集群搭建</title>
      <link>https://anTtutu.github.io/post/2021-04-10-kafka_zookeeper_cluster_install/</link>
      <pubDate>Sat, 10 Apr 2021 00:29:47 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2021-04-10-kafka_zookeeper_cluster_install/</guid>
      <description>前言 一台应用的第三方服务器的kafka只有3个分区，测试一直存在积压的消息，搭建了一套最简单集群测试下，记录中间的参数。 1、准备工作 1.1 环境准备 环境 版本 说明 centos 7.0 操作系统服务器，3台 JDK 1.8.261 安装好jdk并设置好环境变量 zookeeper 3.4.9 zk官方安装包 kafka 2.2.0_2.12 kafka官方安装包 1.2 服务器 IP 端口 说明 192.168.211.125 zk:2181 zk he</description>
    </item>
    
    <item>
      <title>android下的termux模拟器安装openJDK和运行springboot项目</title>
      <link>https://anTtutu.github.io/post/2021-03-10-android_termux_java/</link>
      <pubDate>Wed, 10 Mar 2021 00:29:47 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2021-03-10-android_termux_java/</guid>
      <description>前言 2020年9月份打造好了termux，但是苦于jdk没法安装，只能简单的用ecj(eclipse的java，类似jdk的javac)，但是springboot或者tomcat的项目怎么跑啊? 今天为了做培训演示，找到了termux下的openJDK资源，记录下安装的经过。ter</description>
    </item>
    
    <item>
      <title>springboot的devTools热部署</title>
      <link>https://anTtutu.github.io/post/2019-06-08-springboot_hotdeploy/</link>
      <pubDate>Sat, 08 Jun 2019 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2019-06-08-springboot_hotdeploy/</guid>
      <description>前言 springboot利用devtools实现热部署 1、application.yml 1 2 3 4 5 6 7 8 9 spring:devtools:restart:#热部署生效enabled:true#设置重启的目录#additional-paths: src/main/java#class</description>
    </item>
    
    <item>
      <title>JDK1.8.0.161版本bug定位</title>
      <link>https://anTtutu.github.io/post/2019-03-11-jdkbug/</link>
      <pubDate>Fri, 08 Mar 2019 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2019-03-11-jdkbug/</guid>
      <description>前言 好好运行的系统，突然故障，无意间根据错误信息查找，竟然是jdk的bug，描述下曲折的定位过程。 1、错误日志 有个老系统有使用到soap接口，采用CXF结合接口文件wsdl自动生成的接口开发的，突然在3月2日（后续日志定位才发现真正故障的时间）无法正常工作，但是实际发现时间已经到</description>
    </item>
    
    <item>
      <title>java OOM的种类整理</title>
      <link>https://anTtutu.github.io/post/2018-05-08-oom/</link>
      <pubDate>Tue, 08 May 2018 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2018-05-08-oom/</guid>
      <description>前言 java OOM的种类整理 1、分类 1.1【情况一】： 1 java.lang.OutOfMemoryError: Java heap space: 这种是java堆内存不够，一个原因是真不够，另一个原因是程序中有死循环 如果是java堆内存不够的话，可以通过调整JVM下面的配置来解决： -Xms3062m -Xmx3062m 1.2【情况二】 1 java.lang.OutOfMemoryError: GC overhead limit exceeded 【解释】 JDK6新增错误类型，当GC为释放很小空间占用</description>
    </item>
    
    <item>
      <title>springmvc的参数校验注解整理</title>
      <link>https://anTtutu.github.io/post/2018-03-19-springmvc/</link>
      <pubDate>Mon, 19 Mar 2018 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2018-03-19-springmvc/</guid>
      <description>1、JSR303注解字段校验 注解 说明 功能 @AssertFalse Boolean,boolean 验证注解的元素值是false @AssertTrue Boolean,boolean 验证注解的元素值是true @NotNull 任意类型 验证注解的元素值不是null @Null 任意类型 验证注解的元素值是null @Min(value=值) BigDecimal，BigInteger, byte,short, int, long，等任何Number或</description>
    </item>
    
    <item>
      <title>java小日常记录-不定期更新</title>
      <link>https://anTtutu.github.io/post/2017-08-27-java_use_note/</link>
      <pubDate>Sun, 27 Aug 2017 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2017-08-27-java_use_note/</guid>
      <description>前言 记录工作中碰到的一些 java 小日常积累 1、远程debug调测 web项目远程调测 - 仅用于测试环境或者上线前的调测 注意： 仅限测试环境或者上线前的调测，如果用于生产环境，你的开发工具再debug模式起着的话，会拦截所有的请求。 1 2 # linux增加以下这段就可以远程连接服务器的5888端口</description>
    </item>
    
    <item>
      <title>web应用分析利器-xrebel</title>
      <link>https://anTtutu.github.io/post/2017-08-23-xrebel/</link>
      <pubDate>Wed, 23 Aug 2017 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2017-08-23-xrebel/</guid>
      <description>前言 XRebel 是不间断运行在 web 应用的交互式分析器，当发现问题会在浏览器中显示警告信息。XRebel 会实时监测应用代码的性能指标和可能会发生的问题。 看名称跟之前的jrebel有点相像，对了，是同一家公司的产品，jrebel解决java项目动态部署，xrebel解决j2ee应用的交互式分析（</description>
    </item>
    
    <item>
      <title>eclipse之jrebel热部署插件</title>
      <link>https://anTtutu.github.io/post/2017-06-05-jrebel/</link>
      <pubDate>Mon, 05 Jun 2017 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2017-06-05-jrebel/</guid>
      <description>前言 JRebel是一个J2EE热部署的工具。使用它可以减少浪费8-18％的开发时间在项目的构建和部署上。虽然Java也提供了HotSpot的JVM，但是如果你修改的类中有方法名称变动的话，HotSpot就无能为力了，必须要重要启动应用服务器。JRebel则可以动态监视class文</description>
    </item>
    
    <item>
      <title>Log4j参数整理</title>
      <link>https://anTtutu.github.io/post/2017-05-25-log4j_config/</link>
      <pubDate>Thu, 25 May 2017 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2017-05-25-log4j_config/</guid>
      <description>前言 Log4j 1.x的知识点回顾，2015年8月5日，Apache的Logging Services项目管理委员会宣布Log4j 1.x已经结束生命周期，建议升级 Log4j 2.x。 1. 配置文件 Log4J配置文件的基本格式如下： #配置根Logger log4j.rootLogger = [ level ] , appenderName1 , appenderName2 , … #配置日志信息输出目的地Appen</description>
    </item>
    
    <item>
      <title>H2内存数据库</title>
      <link>https://anTtutu.github.io/post/2017-05-11-h2/</link>
      <pubDate>Thu, 11 May 2017 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2017-05-11-h2/</guid>
      <description>前言 H2数据库介绍 之前项目中用到了H2内存数据库，常用的开源数据库：H2，Derby，HSQLDB，MySQL，PostgreSQL。其中H2，HSQLDB类似，十分适合作为嵌入式数据库使用，其它的数据库大部分都需要安装独立的客户端和服务器端。 H2的优势 1、h2采用纯Java编写</description>
    </item>
    
    <item>
      <title>利用网上的Caeser算法写了一个唯一id生成工具</title>
      <link>https://anTtutu.github.io/post/2017-04-10-caeser/</link>
      <pubDate>Mon, 10 Apr 2017 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2017-04-10-caeser/</guid>
      <description>前言 工作中需要用到，不需要用uuid这种太长的，但是需要有自己特色标识的，于是晚上搜集了部分算法和思路，加工出来一个唯一随机id生成类 思路 改造过的Caesar算法，利用随机数加密，生成前12位 + 后4位随机数，经测试大量数据和实际使用验证，无重复值出现，可以放心使用 1、代码 1 2 3 4</description>
    </item>
    
    <item>
      <title>Java高防OCR和机器人图形验证码</title>
      <link>https://anTtutu.github.io/post/2017-03-09-java_captach/</link>
      <pubDate>Thu, 09 Mar 2017 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2017-03-09-java_captach/</guid>
      <description>前言 结合网上的图形验证码技术，不依赖第三方包纯java加工了一个比较复杂的图形验证码方案，防OCR、防机器人。 网上的图形验证码方案都是零星的，弄了一个随机字体、随机彩色字符、随机字体大小、随机扭曲、随机旋转等技术，能有效的防OCR、描边、深浅色等技术识别。 本意是想区分登录、领券、</description>
    </item>
    
  </channel>
</rss>
