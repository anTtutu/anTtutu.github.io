<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Anttu&#39;s Blog</title>
    <link>https://anTtutu.github.io/post/</link>
    <description>Recent content in Posts on Anttu&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 19 Aug 2020 00:29:47 +0800</lastBuildDate>
    
	<atom:link href="https://anTtutu.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>分析挖矿病毒</title>
      <link>https://anTtutu.github.io/post/2020-08-19-mine_virus/</link>
      <pubDate>Wed, 19 Aug 2020 00:29:47 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2020-08-19-mine_virus/</guid>
      <description>8月13日一早接到负责公司内服务器的IT工程师提醒，测试环境有2台服务器CPU飙得超高，让检查下 1、查看IP 发现是2019年7月份搭建的mysql集群和redis集群测试服务器，先运行top检查进程，发现有个程序占了服务器8C的580%，几乎完全把CPU核心占满了 2、百度 第一直觉</description>
    </item>
    
    <item>
      <title>改用最快的静态blog-hugo</title>
      <link>https://anTtutu.github.io/post/2020-02-13-hugo_blog/</link>
      <pubDate>Thu, 13 Feb 2020 00:29:47 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2020-02-13-hugo_blog/</guid>
      <description>之前用的jekyll搭建的git pages静态blog，今年因为疫情，在家边远程办公边学习go，在bilibili看golang的学习视频，其中发现李文周讲解的golang学习视频不错，从头学习了基础，发现之前直接拿着数据类型和流程控制看语法有很多不足，一些基础的东西忽略了 发现李</description>
    </item>
    
    <item>
      <title>Golang学习笔记01 - 关键字和基础数据类型介绍</title>
      <link>https://anTtutu.github.io/post/2020-02-11-Golang_study_01/</link>
      <pubDate>Tue, 11 Feb 2020 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2020-02-11-Golang_study_01/</guid>
      <description>记录自己的Golang学习笔记 一、Golang关键字和介绍 25个关键字: break default func interface select case defer go map struct chan else goto package switch const fallthrough if range type continue for import return var 针对自己不太熟悉的关键字说明下，虽然以后用着会熟悉，但是提前了解不是坏事 1、break: 跳出循环 func main() { //跳出循环 for i := 0; i &amp;lt; 10; i++ { fmt.Println(i) if i == 6 { break } } } --------------------------------- 0 1</description>
    </item>
    
    <item>
      <title>30W数据批量导入redis集群</title>
      <link>https://anTtutu.github.io/post/2020-01-07-redis_batch_import/</link>
      <pubDate>Tue, 07 Jan 2020 00:29:47 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2020-01-07-redis_batch_import/</guid>
      <description>碰到工作中有数据要一次性快速刷入redis的场景 查了下资料，找到了快速高效的写入方法了 1、先想法子把数据组装程redis底层的命令格式 比如：hset key filed value set key value 2、大量的基础数据生成redis命令 之前我是采用golang读取数据源并转化程redis命令 3、用redis批量导入方式</description>
    </item>
    
    <item>
      <title>mysql集群在线无损扩容</title>
      <link>https://anTtutu.github.io/post/2019-12-21-mysql_expansion/</link>
      <pubDate>Sat, 21 Dec 2019 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2019-12-21-mysql_expansion/</guid>
      <description>收到数据库磁盘占比告警了 前提条件，磁盘采用lvm管理方式，做在线无损扩容才方便管理，其他方式没测试过 1、分配一个1T的新盘，HDD、SDD随规划选择 这个一般在磁阵或者云管理平台操作，不需要什么命令，一般都是图形化操作 2、查找新分配的1T新盘 fdisk -l lvmdiskscan 个人建议第二个命令，2个命令都会返</description>
    </item>
    
    <item>
      <title>被同事误删表找回丢失的数据</title>
      <link>https://anTtutu.github.io/post/2019-03-26-mysql_data_restore/</link>
      <pubDate>Tue, 26 Mar 2019 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2019-03-26-mysql_data_restore/</guid>
      <description>有些不靠谱的同事真的很误事，运维了几年的系统从来没出过误删表数据的事件，3月14日下午突然被同事误删了订单表全量数据，查询表返回0 rows，突然大脑一片空白，心想完了完了，最重要的表数据全部被清理了，虽然有每日凌晨5点的全量备份，但是截止下午的数据怎么找回？从来没碰到过误删事件，</description>
    </item>
    
    <item>
      <title>JDK1.8.0.161版本bug定位</title>
      <link>https://anTtutu.github.io/post/2019-03-11-jdkbug/</link>
      <pubDate>Fri, 08 Mar 2019 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2019-03-11-jdkbug/</guid>
      <description>好好运行的系统，突然故障，无意间根据错误信息查找，竟然是jdk的bug，描述下曲折的定位过程。 一、错误日志 有个老系统有使用到soap接口，采用CXF结合接口文件wsdl自动生成的接口开发的，突然在3月2日（后续日志定位才发现真正故障的时间）无法正常工作，但是实际发现时间已经到了3</description>
    </item>
    
    <item>
      <title>OrangePi</title>
      <link>https://anTtutu.github.io/post/2018-04-10-OrangePi/</link>
      <pubDate>Tue, 10 Apr 2018 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2018-04-10-OrangePi/</guid>
      <description>朋友弄了一批香橙派的板子，给我做测试，拿了板子、CF卡、电源后开启了试玩，通过配置查看，香橙派比草莓派配置还强劲一些，国产的还不错，不过生态没草莓派完善，对新手可能没健全的指导，稍显不友好，但是对于我这种职业开发人员来说，小case，所以这里个人觉得香橙派还是很不错的 1、准备工作</description>
    </item>
    
    <item>
      <title>Cygwin安装</title>
      <link>https://anTtutu.github.io/post/2017-09-12-cygwin_install/</link>
      <pubDate>Tue, 12 Sep 2017 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2017-09-12-cygwin_install/</guid>
      <description>cygwin是windows平台上运行的unix模拟环境，它对于学习unix/linux操作环境，或者从unix到windows的应用程序移植，或者进行某些特殊的开发工作，尤其是使用gnu工具集在windows上进行嵌入式系统开发，非常有用。 cygwin相对安装虚拟机、vps是轻</description>
    </item>
    
    <item>
      <title>java小日常记录-不定期更新</title>
      <link>https://anTtutu.github.io/post/2017-08-27-java_use_note/</link>
      <pubDate>Sun, 27 Aug 2017 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2017-08-27-java_use_note/</guid>
      <description>1、web项目远程调测 - 仅用于测试环境或者上线前的调测 注意：仅限测试环境或者上线前的调测，如果用于生产环境，你的开发工具再debug模式起着的话，会拦截所有的请求。 # linux增加以下这段就可以远程连接服务器的5888端口了 CATALINA_OPTS=&amp;#34;-server -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5888&amp;#34; 添加了debug端口以后好像会出现./shut</description>
    </item>
    
    <item>
      <title>oracle知识梳理-awr\ash\addm日志开启并提取</title>
      <link>https://anTtutu.github.io/post/2017-08-27-oracle-db/</link>
      <pubDate>Sun, 27 Aug 2017 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2017-08-27-oracle-db/</guid>
      <description>之前工作经常搜集AWR日志，但是因工作环境的调整，6年下来的笔记都无法带出来，只能回忆一些和找一些网上的信息整理了。 常规的性能分析，awr足够了，但是深层次的问题，需要更多的日志，下面整理下awr、ash、addm日志的手工提取方式 一、awr报告开启和提取操作步骤: 前提条件数据库</description>
    </item>
    
    <item>
      <title>oracle知识梳理-执行计划分析</title>
      <link>https://anTtutu.github.io/post/2017-08-27-oracle-excuteplan/</link>
      <pubDate>Sun, 27 Aug 2017 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2017-08-27-oracle-excuteplan/</guid>
      <description>分析某条SQL的性能问题，通常我们要先看SQL的执行计划，看看SQL的每一步执行是否存在问题。常用的两种方法查看SQL执行计划。 方法一：autotrace生成执行计划 这种方式执行方便，但是当遇到执行时间长的SQL就变得不太现实，它是先产生结果再生成执行计划的。关于Autotrac</description>
    </item>
    
    <item>
      <title>web应用分析利器-xrebel</title>
      <link>https://anTtutu.github.io/post/2017-08-23-xrebel/</link>
      <pubDate>Wed, 23 Aug 2017 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2017-08-23-xrebel/</guid>
      <description>XRebel 是不间断运行在 web 应用的交互式分析器，当发现问题会在浏览器中显示警告信息。XRebel 会实时监测应用代码的性能指标和可能会发生的问题。 看名称跟之前的jrebel有点相像，对了，是同一家公司的产品，jrebel解决java项目动态部署，xrebel解决j2ee应用的交互式分析（甚至</description>
    </item>
    
    <item>
      <title>给你的静态博客增加留言系统</title>
      <link>https://anTtutu.github.io/post/2017-08-06-gitment/</link>
      <pubDate>Sun, 06 Aug 2017 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2017-08-06-gitment/</guid>
      <description>Gitment 是作者imsun实现的一款基于 GitHub Issues 的评论系统。支持在前端直接引入，不需要任何后端代码。可以在页面进行登录、查看、评论、点赞等操作，同时有完整的 Markdown / GFM 和代码高亮支持。尤为适合各种基于 GitHub Pages 的静态博客或项目页面。 本博客评论系统已迁移至 Gitment，参考作者的介绍部署成功，不过这里补</description>
    </item>
    
    <item>
      <title>开发技能-shell面试整理</title>
      <link>https://anTtutu.github.io/post/2017-07-28-shell_check/</link>
      <pubDate>Fri, 28 Jul 2017 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2017-07-28-shell_check/</guid>
      <description>1、常规命令 cd 切换目录 ls 查看当前目录下的内容 cp 复制 head、tail 显示文件头、尾内容 cat 查看文件内容 more、less 分页展示文件内容 rm 删除 tar 解、压缩 touch 创建文本 mv 移动或重命名 find 在文件系统中搜索某文件 如find . -name filename 支持正则 wc 统计 grep 查找某个字符串 pwd 显示当前目录 2、系统管理命令 su 切换</description>
    </item>
    
    <item>
      <title>SQLMap初学使用和参数讲解</title>
      <link>https://anTtutu.github.io/post/2017-07-15-sqlmap/</link>
      <pubDate>Sat, 15 Jul 2017 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2017-07-15-sqlmap/</guid>
      <description>测试web系统的sql注入问题，学着使用神器sqlmap，下载了最新版本: Git地址：https://github.com/sqlmapproject/sqlmap 前提条件设置好python2.7和环境变量，python3.6也支持只是2.7当前工具更多 以某自己搭建的注入点为例：</description>
    </item>
    
    <item>
      <title>初识Kali-linux及其工具</title>
      <link>https://anTtutu.github.io/post/2017-07-15-kali/</link>
      <pubDate>Sat, 15 Jul 2017 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2017-07-15-kali/</guid>
      <description>在虚拟机里安装了专用安全测试工具，kali Linux， vm及其安装步骤很简单，kali是debain的一个linux发型版本，里面包含很多安全测试工具，既然是工具，你懂的，既是盾也是矛，不过跟神器sqlmap一样，我们拿来做安全测试再好不过。 安装完kali后，默认是图形化进入，尝</description>
    </item>
    
    <item>
      <title>eclipse之jrebel热部署插件</title>
      <link>https://anTtutu.github.io/post/2017-06-04-jrebel/</link>
      <pubDate>Sun, 04 Jun 2017 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2017-06-04-jrebel/</guid>
      <description>JRebel是一个J2EE热部署的工具。使用它可以减少浪费8-18％的开发时间在项目的构建和部署上。虽然Java也提供了HotSpot的JVM，但是如果你修改的类中有方法名称变动的话，HotSpot就无能为力了，必须要重要启动应用服务器。JRebel则可以动态监视class文件及</description>
    </item>
    
    <item>
      <title>linux日常小细节注意说明</title>
      <link>https://anTtutu.github.io/post/2017-06-04-shell_use/</link>
      <pubDate>Sun, 04 Jun 2017 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2017-06-04-shell_use/</guid>
      <description>1、清理cache 仅清除页面缓存（PageCache） sync; echo 1 &amp;gt; /proc/sys/vm/drop_caches 清除目录项和inode sync; echo 2 &amp;gt; /proc/sys/vm/drop_caches 清除页面缓存，目录项和inode sync; echo 3 &amp;gt; /proc/sys/vm/drop_caches 2、crontab定时任务取值范围 文件/etc/crontab中每行任务的描述格式如下: minute hour day month dayofweek command minute - 从0到59的整数 hour - 从0到23的整数 day</description>
    </item>
    
    <item>
      <title>Redis日常命令整理</title>
      <link>https://anTtutu.github.io/post/2017-06-04-redis/</link>
      <pubDate>Sun, 04 Jun 2017 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2017-06-04-redis/</guid>
      <description>在linux中 批量操作redis中的 keys的方法： 统计个数： redis中名称含有OMP_OFFLINE的key的个数； src/redis-cli keys &amp;#34;*OMP_OFFLINE*&amp;#34;|wc -l 批量删除 批量删除 0号数据库中名称含有OMP_OFFLINE的key： src/redis-cli -n 0 keys &amp;#34;*OMP_OFFLINE*&amp;#34;|xargs src/redis-cli -n 0 del 在redis的客户端环境中并不支持批量删除。 可以把某个keys的结</description>
    </item>
    
    <item>
      <title>市面上所有浏览器内核或UserAgent参数</title>
      <link>https://anTtutu.github.io/post/2017-06-04-browser/</link>
      <pubDate>Sun, 04 Jun 2017 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2017-06-04-browser/</guid>
      <description>市面上常见的浏览器内核：只需要挑其中常见的测试即可： 1、Trident内核：IE最先开发或使用的，也称IE内核，360浏览器使用的也是IE内核； 2、Edge内核：微软最新浏览器的内核； 3、Webkit内核：谷歌chrome浏览器最先开发或使用，也叫谷歌内核； 4、Gecko内核： N</description>
    </item>
    
    <item>
      <title>jekyll搭建自己的静态blog</title>
      <link>https://anTtutu.github.io/post/2017-06-02-jekyll_ruby_blog/</link>
      <pubDate>Fri, 02 Jun 2017 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2017-06-02-jekyll_ruby_blog/</guid>
      <description>端午节，花了2天时间学习了下ruby + jekyll + github pages，踩过不少坑，记录下学习笔记。 ruby建议是在Linux环境下安装的，但是工作电脑是windows比较常见，下面记录下在windows 7 64bit版本下安装ruby + jekyll + ruby devkit的经历，进过坑，不过都爬出来了，把爬坑经历</description>
    </item>
    
    <item>
      <title>Log4j参数整理</title>
      <link>https://anTtutu.github.io/post/2017-05-22-log4j/</link>
      <pubDate>Mon, 22 May 2017 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2017-05-22-log4j/</guid>
      <description>1. 配置文件 Log4J配置文件的基本格式如下： #配置根Logger log4j.rootLogger = [ level ] , appenderName1 , appenderName2 , … #配置日志信息输出目的地Appender log4j.appender.appenderName = fully.qualified.name.of.appender.class log4j.appender.appenderName.option1 = value1 … log4j.appender.appenderName.optionN = valueN #配置日志信息的格式（布局） log4j.appender.appenderName.layout = fully.qualified.name.of.layout.class log4j.appender.appenderName.layout.option1 = value1 … log4j.appender.appenderName.layout.optionN = valueN 其中 [level] 是日志输出级别，共有5级： FATAL 0 ERROR 3 WARN 4 INFO 6 DEBUG 7 Appender 为日志输出目的地，Log4j提供</description>
    </item>
    
    <item>
      <title>Oracle11gR2手工配置dataguard</title>
      <link>https://anTtutu.github.io/post/2017-05-22-Oracle11gR2_dataguard/</link>
      <pubDate>Mon, 22 May 2017 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2017-05-22-Oracle11gR2_dataguard/</guid>
      <description>网上有很多Oracle Dataguard的配置教程，但不难发现，很多采用的是rman duplicate这种方法，尽管此种方法较为简便。但在某种程度上，却也误导了初学者，虽说也能配置成功，但只知其然不知其所以然，Dataguard的本质没有吃透，也不利于其维护和调优。 本配置基于Or</description>
    </item>
    
    <item>
      <title>VCS第七波-磁阵管理LVM和VxVM3-LVM</title>
      <link>https://anTtutu.github.io/post/2017-05-21-lvm-vxvm3/</link>
      <pubDate>Sun, 21 May 2017 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2017-05-21-lvm-vxvm3/</guid>
      <description>LVM（Logicl Volume Manager），逻辑卷管理器，通过使用逻辑卷管理器对硬盘存储设备进行管理，可以实现硬盘空间的动态划分和调整。 ##一、基本概念 1、物理卷&amp;ndash;PV（Physical Volume） 物理卷在逻辑卷管理中处于最底层，它可以是实际物理硬盘上的分区，也可以是整</description>
    </item>
    
    <item>
      <title>VCS第五波-磁阵管理LVM和VxVM1-LVM</title>
      <link>https://anTtutu.github.io/post/2017-05-21-lvm-vxvm/</link>
      <pubDate>Sun, 21 May 2017 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2017-05-21-lvm-vxvm/</guid>
      <description>使用VCS双机经常要跟磁阵打交道，磁阵的逻辑卷组管理也有不同厂之间的方案，比如免费的系统自带的lvm，Linux的lvm与unix的lvm还有点不同，Veritas的VxVM， 对比下呢，各有千秋，lvm免费成本低，但集群管理也比较方便和省成本，相同的设备做容灾也可以应用，但是不同</description>
    </item>
    
    <item>
      <title>VCS第六波-磁阵管理LVM和VxVM2-VxVM</title>
      <link>https://anTtutu.github.io/post/2017-05-21-lvm-vxvm2/</link>
      <pubDate>Sun, 21 May 2017 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2017-05-21-lvm-vxvm2/</guid>
      <description>VxVM虽然支持不同平台，但是又是商业的，需要支付昂贵的license费用，基于Veritas在存储界的地位，还是需要了解下的。 1 初始化磁盘命令 vxdctl enable vxdisksetup -if sdb 2 查看卷组 vxdisk -o alldgs list 3 查看已激活卷组 vxdg list 4 创建卷组 vxdg init vgname diskname(sdd)/vgcdr0_1=sdf vxdg init diskgroup disk_name=device_name 5 删除卷组 vxdg destroy vgname 6 创建逻辑卷 vxassist -g vgname -U gen make volume size //裸设备 vxassist -g vgname -U</description>
    </item>
    
    <item>
      <title>VCS第四波-main.cf解读</title>
      <link>https://anTtutu.github.io/post/2017-05-15-vcs4/</link>
      <pubDate>Mon, 15 May 2017 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2017-05-15-vcs4/</guid>
      <description>mian.cf是VCS的集群配置文件，需要理解该配置文件及其参数含义，下面把以前电信行业积累的Oracle冷双机结构标记下 include &amp;quot;types.cf&amp;quot; ---- VCS资源类型引用文件，下面的资源类型源于这里的引用，否者无法识别 include &amp;quot;OracleTypes.cf&amp;quot; ---- VCS的Agent节点Oracle资源类型引用，Oracle的资源需要识别也依赖</description>
    </item>
    
    <item>
      <title>VCS第三波-VCS的模块工作原理</title>
      <link>https://anTtutu.github.io/post/2017-05-14-vcs3/</link>
      <pubDate>Sun, 14 May 2017 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2017-05-14-vcs3/</guid>
      <description>既然VCS用得多了，原理还是要了解下的，不然定位问题还是很吃力的，知道了集群知识和VCS的工作原理，对日常管理有很大的帮助 转至http://down.51cto.com/data/316764 总结下： HAD用于是配合Agent做状态同步的工作进程 LLT用于心跳通讯 GAB用于Clu</description>
    </item>
    
    <item>
      <title>VCS第二波-命令管理</title>
      <link>https://anTtutu.github.io/post/2017-05-13-vcs2/</link>
      <pubDate>Sat, 13 May 2017 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2017-05-13-vcs2/</guid>
      <description>声明：部分截图和命令的返回结果借用网络，因VCS是商业软件缺license，安装VCS后需要license，演示成本太大 VCS的安装和命令都在下列目录下：sbin, /usr/sbin, /opt/VRTS/bin,和/opt/VRTSvcs/bin，如果没有设置VCS的环境变量，请在/etc/pro</description>
    </item>
    
    <item>
      <title>VCS第一波-HA-VCS</title>
      <link>https://anTtutu.github.io/post/2017-05-12-vcs1/</link>
      <pubDate>Fri, 12 May 2017 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2017-05-12-vcs1/</guid>
      <description>换到互联网电商行业了，以前电信行业的知识积累做下笔记。谈到VCS，就会想到HA-高可用方案，做高可用方案的厂商比较多，其中工作接触到Veritas的VCS和IBM的HACMP，这里先对VCS做下笔记整理，互联网行业都喜欢用免费方案和热备，VCS的冷备方案几乎没见到厂商使用，但是V</description>
    </item>
    
    <item>
      <title>H2内存数据库</title>
      <link>https://anTtutu.github.io/post/2017-05-11-h2/</link>
      <pubDate>Thu, 11 May 2017 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2017-05-11-h2/</guid>
      <description>之前项目中用到了H2内存数据库，做下整理： H2数据库介绍 常用的开源数据库：H2，Derby，HSQLDB，MySQL，PostgreSQL。其中H2，HSQLDB类似，十分适合作为嵌入式数据库使用，其它的数据库大部分都需要安装独立的客户端和服务器端。 H2的优势： 1、h2采用纯Ja</description>
    </item>
    
    <item>
      <title>利用网上的Caeser算法写了一个唯一id生成工具</title>
      <link>https://anTtutu.github.io/post/2017-05-10-caeser/</link>
      <pubDate>Wed, 10 May 2017 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2017-05-10-caeser/</guid>
      <description>工作中需要用到，不需要用uuid这种太长的，但是需要有自己特色标识的，于是晚上搜集了部分算法和思路，加工出来一个唯一随机id生成类 思路：改造过的Caesar算法，利用随机数加密，生成前12位 + 后4位随机数，经测试大量数据和实际使用验证，无重复值出现，可以放心使用 // key private static String KEYS = &amp;quot;0123456789qwertyuiopasdfghjklzxcvbnm&amp;quot;; /**</description>
    </item>
    
    <item>
      <title>Java高防OCR和机器人图形验证码</title>
      <link>https://anTtutu.github.io/post/2017-05-09-Java_ImgCode/</link>
      <pubDate>Tue, 09 May 2017 21:46:20 +0800</pubDate>
      
      <guid>https://anTtutu.github.io/post/2017-05-09-Java_ImgCode/</guid>
      <description>结合网上的图形验证码技术，不依赖第三方包纯java加工了一个比较复杂的图形验证码方案，防OCR、防机器人。 网上的图形验证码方案都是零星的，弄了一个随机字体、随机彩色字符、随机字体大小、随机扭曲、随机旋转等技术，能有效的防OCR、描边、深浅色等技术识别。 本意是想区分登录、领券、抽奖</description>
    </item>
    
  </channel>
</rss>